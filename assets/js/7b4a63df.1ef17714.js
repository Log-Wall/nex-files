"use strict";(self.webpackChunknexfiles=self.webpackChunknexfiles||[]).push([[8046],{9119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(4848),a=t(8453);const s={},i="Examples",o={id:"eventStream/examples",title:"Examples",description:"The following is an example of a basic function tied to a GMCP event. This will wave to any player that enters the room. An example of the GMCP message from Nexus:",source:"@site/docs/eventStream/examples.md",sourceDirName:"eventStream",slug:"/eventStream/examples",permalink:"/nex-files/docs/eventStream/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/NexusUnleashed/nex-files/tree/main/docs/eventStream/examples.md",tags:[],version:"current",frontMatter:{},sidebar:"eventStreamSidebar",previous:{title:"API",permalink:"/nex-files/docs/eventStream/api"}},l={},d=[{value:"Standard GMCP Events",id:"standard-gmcp-events",level:2},{value:"Player enters the room",id:"player-enters-the-room",level:3},{value:"NPC enters the room",id:"npc-enters-the-room",level:3},{value:"Custom event",id:"custom-event",level:2},{value:"Target Shielding",id:"target-shielding",level:3},{value:"Packaged events",id:"packaged-events",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"The following is an example of a basic function tied to a GMCP event. This will wave to any player that enters the room. An example of the GMCP message from Nexus:"}),"\n",(0,r.jsx)(n.h2,{id:"standard-gmcp-events",children:"Standard GMCP Events"}),"\n",(0,r.jsx)(n.h3,{id:"player-enters-the-room",children:"Player enters the room"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[GMCP]: Room.AddPlayer {"name":"Khaseem","fullname":"Khaseem"}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["note: Room.AddPlayer is sent by ",(0,r.jsx)(n.strong,{children:"Nexus"})," but is not a core server GMCP message"]})}),"\n",(0,r.jsx)(n.p,{children:"With GMCP messages thse are raised automatically by eventStream as received. This event/listener will fire every time a player enters the room."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const greetPlayer = (args) => {\r\n  // Wave hello to the player who entered the room.\r\n  nexusclient.send_commands(`wave ${args.name}`);\r\n};\r\neventStream.registerEvent("Room.AddPlayer", greetPlayer);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"npc-enters-the-room",children:"NPC enters the room"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'[GMCP]: Char.Items.Add {"location":"room","item":{"id":530669,"name":"a tiny blue quail","icon":"paw-claws","attrib":"m","parentid":"room"}}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using the same style of code from the previous example we can make everyone else aware that we see the NPC. In this example the GMCP received is a bit more complex so we'll need to do some additional checks."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const pointNpc = (args) => {\r\n  // Char.Items.Add will fire for both the Room and your Inventory.\r\n  //First lets check if this GMCP message is for an item in the Room.\r\n  if (args.location === "room") {\r\n    nexusclient.send_commands(`point ${args.item.id}`);\r\n  }\r\n};\r\neventStream.registerEvent("Room.AddPlayer", greetPlayer);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"custom-event",children:"Custom event"}),"\n",(0,r.jsx)(n.p,{children:"Any number of events can be created. The only requirement is a unique event id."}),"\n",(0,r.jsx)(n.h3,{id:"target-shielding",children:"Target Shielding"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const shieldNotice = (args) => {\r\n  if (args.id === GMCP.Target.Text) {\r\n    nexusclient.display_notice("MY TARGET HAS SHIELDED!!!!");\r\n  }\r\n};\r\neventStream.registerEvent("targetShield", shieldNotice);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then in a Nexus trigger with a pattern like ",(0,r.jsx)(n.code,{children:"^A nearly invisible magical shield forms around (.*)\\.$"}),"\r\nYou could have snippet of code for"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'eventStream.raiseEvent("targetShield", { id: args[1] });\n'})}),"\n",(0,r.jsx)(n.p,{children:"Now, someone may ask why not just place the code directly in the trigger? What purpose is the event servering here?"}),"\n",(0,r.jsx)(n.p,{children:"Both are viable paths. One benefit of an event handler in this scenario is any number of other packages could add on to the targetShield event. You may have a bashing package that cares when a target shields, but also a pvp package that cares as well. In a completely separate package you could add another listener:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const razeTargetPVP = (args) => {\r\n  nexusclient.send_commands(`queue addclear free raze ${myTargetVar}`);\r\n};\r\neventStream.registerEvent("targetShield", razeTargetPVP);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"packaged-events",children:"Packaged events"}),"\n",(0,r.jsx)(n.p,{children:"Many packages, like nexMap, nexSys, nexGui, create and handle a variety of custom events that users can tap into. nexSys for example will raise events for things like afflictions, defences, items, etc."}),"\n",(0,r.jsx)(n.p,{children:"Check with the various packages for details."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const a={},s=r.createContext(a);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);